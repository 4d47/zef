=pod

=encoding utf8

=head2 Zef

Perl6 Module Management

=for HTML <a href="https://travis-ci.org/ugexe/zef"><img src="https://travis-ci.org/ugexe/zef.svg?branch=master"></a>

=head1 Installation

=head4 Rakudobrew

To install it via rakudobrew, please use the following command:

    $ rakudobrew build-zef

=head4 Manual

    git clone https://github.com/ugexe/zef.git
    cd zef
    perl6 -Ilib bin/zef install .

=head1 USAGE

    # duh
    zef install CSV::Parser

    # search for module names matching `CSV::Parser`
    zef search CSV::Parser

    # test project in current directory    
    zef test .

    # fetch a specific module only
    zef get CSV::Parser

=head2 Notice

Still Beta level software. The process of implementing all of the previous features, test suite, and documentation is
still in the works (see an older readme to see expected full feature set). It will even generate a build hook from
convoluted Build.pm hook files to not require an external dependency on a package manager (It does this via saving as
a file named Build.pm.zef, although its still 100% compatable with any other package manager [proof of the unnecessary
dependency it otherwise causes] if its renamed back to Build.pm)

=head2 More CLI

=head4 B<install>
    
    # skip testing
    --skip-tests

    # install the requested modules regardless of currently installed versions
    --force

=head4 B<search>

How these are handled depends on the `ContentStorage` engine used, which by default is the p6c ecosystem and
metacpan. Note that metacpan search is not likely to produce any useful results yet. More documentation will
be available when I have a better idea how to integrate results from these 2 services.

=head2 Plugins and Configuration

See the root zef directory for config.json. Each phase module will attempt to load/use each plugin in order.
More details to be made available in time, but they are fairly simple and the code itself should provide enough
insight to get something done.

=head1 FAQ

=head3 Are all these shell scripts safe?

Kinda. Paths should be safe, but still needs a URI validator.

=head3 Windows!

Mostly. Still need to figure out how to handle tar (not just zip and gzip) with PowerShell.
But by default it will try to use git which should work fine.

=cut